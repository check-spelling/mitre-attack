from unittest import TestCase
from mitre_attack.api.client import MitreAttack
from mitre_attack.data.types.malware import Malware


class TestMalware(TestCase):
    @classmethod
    def setUpClass(cls):
        cls.mitre_attack = MitreAttack()

    def test_get_malware_family_by_id(self):
        malware = next(self.mitre_attack.enterprise.iter_malware_families())
        software_id = malware.id

        expected = malware
        result = self.mitre_attack.enterprise.get_malware_family(software_id=software_id)
        self.assertEqual(expected, result)

    def test_get_malware_family_by_name(self):
        malware = next(self.mitre_attack.enterprise.iter_malware_families())
        software_name = malware.name

        expected = malware
        result = self.mitre_attack.enterprise.get_malware_family(software_name=software_name)
        self.assertEqual(expected, result)

    def test_iter_malware_families(self):
        malware = list(self.mitre_attack.enterprise.iter_malware_families())
        self.assertGreater(len(malware), 0)
        for malware in malware:
            self.assertIsInstance(malware, Malware)

    def test_iter_malware_families_by_id(self):
        malware = next(self.mitre_attack.enterprise.iter_malware_families())

        expected = [malware.id]
        result = [malware.id for malware in self.mitre_attack.enterprise.iter_malware_families(software_ids=[malware.id])]
        self.assertEqual(expected, result)

    def test_iter_malware_families_by_name(self):
        malware = next(self.mitre_attack.enterprise.iter_malware_families())

        expected = [malware.name]
        result = [malware.name for malware in self.mitre_attack.enterprise.iter_malware_families(software_names=[malware.name])]
        self.assertEqual(expected, result)
